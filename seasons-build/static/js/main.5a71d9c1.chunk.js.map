{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAKMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,qBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,kBACNC,SAAU,eA2BHE,EAfO,SAACC,GAEnB,IAVeC,EAAKC,EAUdC,GAVSF,EAUUD,EAAMC,KAVXC,GAUgB,IAAIE,MAAOC,YATnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAGFP,EAAaS,GAAhCP,EAHqB,EAGrBA,KAAMC,EAHe,EAGfA,SAEV,OACI,yBAAKS,UAAS,yBAAoBH,IAC9B,uBAAGG,UAAS,kBAAaT,EAAb,qBACZ,4BAAKD,GACL,uBAAGU,UAAS,kBAAaT,EAAb,wBC/BtBU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKvDD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCTTG,E,4MACFC,MAAQ,CACJV,IAAK,KACLW,aAAc,I,kEAGG,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBACrB,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACjD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,sCAMjD,OAAGc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAC/B,uCAAaqB,KAAKX,MAAMC,eAG/BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAC/B,kBAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGnC,kBAAC,EAAD,CAASO,QAAQ,oC,+BAKxB,OACI,yBAAKF,UAAU,cAAcgB,KAAKC,qB,GA7B5BC,aAkClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.5a71d9c1.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\n\r\n\r\n\r\nconst seasonConfig = {\r\n    summer: {\r\n        text: 'Lets hit the beach',\r\n        iconName: 'sun'\r\n    },  \r\n    winter: {\r\n        text: \"Brr it is cold!\",\r\n        iconName: 'snowflake'\r\n    }\r\n}\r\n \r\nconst getSeason = (lat, month) => {\r\n    if (month > 2 && month < 9) {\r\n        return lat > 0 ? 'summer' : 'winter';\r\n    } else {\r\n        return lat > 0 ? 'winter' : 'summer';\r\n    }\r\n}\r\n\r\nconst SeasonDisplay = (props) => {\r\n    \r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const { text, iconName } = seasonConfig[season] \r\n\r\n        return(\r\n            <div className={`season-display ${season}`}>\r\n                <i className={`massive ${iconName} icon icon-left`} />\r\n                <h1>{text}</h1>\r\n                <i className={`massive ${iconName} icon icon-right`} />\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default SeasonDisplay;","import React from 'react';\r\n\r\nconst Spinner = (props) => {\r\n    return(\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nSpinner.defaultProps = {\r\n    message: 'Loading...'\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        lat: null,\r\n        errorMessage: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n                position => this.setState({ lat: position.coords.latitude }),\r\n                err => this.setState({ errorMessage: err.message })\r\n            \r\n        );\r\n    }\r\n\r\n    renderContent() {\r\n        if(this.state.errorMessage && !this.state.lat) {\r\n            return <div>Error: {this.state.errorMessage}</div>\r\n        }\r\n\r\n        if(!this.state.errorMessage && this.state.lat) {\r\n            return <SeasonDisplay lat={this.state.lat} />\r\n        }\r\n\r\n        return <Spinner message=\"Please allow location request\" />;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"border red\">{this.renderContent()}</div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}